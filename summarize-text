#!/usr/bin/env bash

set -e -o pipefail
shopt -s dotglob

# Get the base name of the script for help text
cmd_base=$(basename "$0")

# Simple info function for logging
info() {
   echo "ℹ️ $*" >&2
}

display_help_text_and_die() {
   cat - <<EOM
USAGE:
   some_command | $cmd_base [OPTION]
WTF:
   Summarize the text from STDIN
OPTIONS:
   -l | --ollama:  Use the Ollama API with mistral (default, runs locally, 
                   requires ollama launchd service to be running)
   -o | --openai:  Use the OpenAI API 
   -c | --claude:  Use the Claude API 
EOM
   exit 1
}

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
   display_help_text_and_die
fi

# check for bash v3.2+
if [ "${BASH_VERSINFO[0]}" -lt 3 ] || ([ "${BASH_VERSINFO[0]}" -eq 3 ] && [ "${BASH_VERSINFO[1]}" -lt 2 ]); then
   echo "This script requires bash 3.2 or higher."
   exit 1
fi

# Read input text into an array (bash 3.2 compatible)
input_text=()
while IFS= read -r line; do
   input_text+=("$line")
done

# Build prompt string
prompt="Please summarize the following text:"
for line in "${input_text[@]}"; do
   prompt="$prompt"$'\n'"$line"
done

ollama_summarize() {
   info "Summarizing text with ollama"
   # brew services start ollama # just in case it's not already running
   ollama run mistral "$prompt"
}

openai_summarize() {
   info "Summarizing text with OpenAI"
   source ~/.ssh/.openaikey-tigger04.sh

   curl https://api.openai.com/v1/chat/completions \
      -s \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -H "Content-Type: application/json" \
      -d "$(jq -n --arg prompt "$prompt" \
         '{
            model: "gpt-4o",
            messages: [
              {
                role: "user",
                content: $prompt
               }
            ]
      }')" | jq -r '.choices[0].message.content'
}

claude_summarize() {
   info "Summarizing text with Claude"
   command -v claude >/dev/null 2>&1 || exit 1
   source ~/.ssh/.claude-api-key.sh
   claude "$prompt"
}

case $1 in
-l | --ollama)
   ollama_summarize
   ;;
-o | --openai)
   openai_summarize
   ;;
-c | --claude)
   claude_summarize
   ;;
-*)
   display_help_text_and_die
   ;;
*)
   ollama_summarize # default
   ;;
esac
